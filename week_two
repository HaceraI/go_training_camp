package main

import (
	"context"
	"github.com/pkg/errors"
	"golang.org/x/sync/errgroup"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	g, ctx := errgroup.WithContext(context.Background())

	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("hello world!"))
	})

	serverShutdown := make(chan struct{})
	mux.HandleFunc("/shutdown", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Server in Shutdown..."))
		serverShutdown <- struct{}{}
	})

	server := http.Server{
		Handler: mux,
		Addr:    ":8080",
	}

	// 启动Serve
	g.Go(func() error {
		return server.ListenAndServe()
	})

	handleShutdown(g, ctx, serverShutdown, &server)
	handleSignal(g, ctx)
	
	if err := g.Wait(); err != nil {
		log.Printf("errgroup error: %+v\n", err)
	}
}

func handleShutdown(g *errgroup.Group, ctx context.Context, serverShutdown chan struct{}, server *http.Server) {
	g.Go(func() error {
		select {
			case <-ctx.Done():
				log.Println("errgroup exit...")
			case <-serverShutdown:
				log.Println("Server shutdown signal...")
		}

		timeoutCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		log.Println("shutting down server...")
		return server.Shutdown(timeoutCtx)
	})
}

func handleSignal(g *errgroup.Group, ctx context.Context) {
	g.Go(func() error {
		quit := make(chan os.Signal, 0)
		signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

		select {
			case <-ctx.Done():
				return ctx.Err()
			case sig := <-quit:
				return errors.Errorf("get os signal: %v", sig)
		}
	})
}
